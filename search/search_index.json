{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Forust","text":""},{"location":"#python-api-reference","title":"Python API Reference","text":"<p>The <code>GradientBooster</code> class is currently the only public facing class in the package, and can be used to train gradient boosted decision tree ensembles with multiple objective functions.</p>"},{"location":"#forust.GradientBooster","title":"GradientBooster","text":"<pre><code>GradientBooster(*, objective_type: str = 'LogLoss', iterations: int = 100, learning_rate: float = 0.3, max_depth: int = 5, max_leaves: int = sys.maxsize, l1: float = 0.0, l2: float = 1.0, gamma: float = 0.0, max_delta_step: float = 0.0, min_leaf_weight: float = 1.0, base_score: float = 0.5, nbins: int = 256, parallel: bool = True, allow_missing_splits: bool = True, monotone_constraints: Union[dict[Any, int], None] = None, subsample: float = 1.0, top_rate: float = 0.1, other_rate: float = 0.2, colsample_bytree: float = 1.0, seed: int = 0, missing: float = np.nan, create_missing_branch: bool = False, sample_method: str | None = None, grow_policy: str = 'DepthWise', evaluation_metric: str | None = None, early_stopping_rounds: int | None = None, initialize_base_score: bool = True, terminate_missing_features: Iterable[Any] | None = None, missing_node_treatment: str = 'None', log_iterations: int = 0, feature_importance_method: str = 'Gain', force_children_to_bound_parent: bool = False)\n</code></pre> <p>Gradient Booster Class, used to generate gradient boosted decision tree ensembles.</p> <p>Parameters:</p> <ul> <li> <code>objective_type</code>             (<code>str</code>, default:                 <code>'LogLoss'</code> )         \u2013          <p>The name of objective function used to optimize. Valid options include \"LogLoss\" to use logistic loss as the objective function (binary classification), or \"SquaredLoss\" to use Squared Error as the objective function (continuous regression). Defaults to \"LogLoss\".</p> </li> <li> <code>iterations</code>             (<code>int</code>, default:                 <code>100</code> )         \u2013          <p>Total number of trees to train in the ensemble. Defaults to 100.</p> </li> <li> <code>learning_rate</code>             (<code>float</code>, default:                 <code>0.3</code> )         \u2013          <p>Step size to use at each iteration. Each leaf weight is multiplied by this number. The smaller the value, the more conservative the weights will be. Defaults to 0.3.</p> </li> <li> <code>max_depth</code>             (<code>int</code>, default:                 <code>5</code> )         \u2013          <p>Maximum depth of an individual tree. Valid values are 0 to infinity. Defaults to 5.</p> </li> <li> <code>max_leaves</code>             (<code>int</code>, default:                 <code>maxsize</code> )         \u2013          <p>Maximum number of leaves allowed on a tree. Valid values are 0 to infinity. This is the total number of final nodes. Defaults to sys.maxsize.</p> </li> <li> <code>l1</code>             (<code>float</code>, default:                 <code>0.0</code> )         \u2013          <p>L1 regularization term applied to the weights of the tree. Valid values are 0 to infinity. Defaults to 0.0.</p> </li> <li> <code>l2</code>             (<code>float</code>, default:                 <code>1.0</code> )         \u2013          <p>L2 regularization term applied to the weights of the tree. Valid values are 0 to infinity. Defaults to 1.0.</p> </li> <li> <code>gamma</code>             (<code>float</code>, default:                 <code>0.0</code> )         \u2013          <p>The minimum amount of loss required to further split a node. Valid values are 0 to infinity. Defaults to 0.0.</p> </li> <li> <code>max_delta_step</code>             (<code>float</code>, default:                 <code>0.0</code> )         \u2013          <p>Maximum delta step allowed at each leaf. This is the maximum magnitude a leaf can take. Setting to 0 results in no constrain. Defaults to 0..</p> </li> <li> <code>min_leaf_weight</code>             (<code>float</code>, default:                 <code>1.0</code> )         \u2013          <p>Minimum sum of the hessian values of the loss function required to be in a node. Defaults to 1.0.</p> </li> <li> <code>base_score</code>             (<code>float</code>, default:                 <code>0.5</code> )         \u2013          <p>The initial prediction value of the model. If <code>initialize_base_score</code> is set to True the <code>base_score</code> will automatically be updated based on the objective function at fit time. Defaults to 0.5.</p> </li> <li> <code>nbins</code>             (<code>int</code>, default:                 <code>256</code> )         \u2013          <p>Number of bins to calculate to partition the data. Setting this to a smaller number, will result in faster training time, while potentially sacrificing accuracy. If there are more bins, than unique values in a column, all unique values will be used. Defaults to 256.</p> </li> <li> <code>parallel</code>             (<code>bool</code>, default:                 <code>True</code> )         \u2013          <p>Should multiple cores be used when training and predicting with this model? Defaults to <code>True</code>.</p> </li> <li> <code>allow_missing_splits</code>             (<code>bool</code>, default:                 <code>True</code> )         \u2013          <p>Allow for splits to be made such that all missing values go down one branch, and all non-missing values go down the other, if this results in the greatest reduction of loss. If this is false, splits will only be made on non missing values. If <code>create_missing_branch</code> is set to <code>True</code> having this parameter be set to <code>True</code> will result in the missing branch further split, if this parameter is <code>False</code> then in that case the missing branch will always be a terminal node. Defaults to <code>True</code>.</p> </li> <li> <code>monotone_constraints</code>             (<code>dict[Any, int]</code>, default:                 <code>None</code> )         \u2013          <p>Constraints that are used to enforce a specific relationship between the training features and the target variable. A dictionary should be provided where the keys are the feature index value if the model will be fit on a numpy array, or a feature name if it will be fit on a pandas Dataframe. The values of the dictionary should be an integer value of -1, 1, or 0 to specify the relationship that should be estimated between the respective feature and the target variable. Use a value of -1 to enforce a negative relationship, 1 a positive relationship, and 0 will enforce no specific relationship at all. Features not included in the mapping will not have any constraint applied. If <code>None</code> is passed no constraints will be enforced on any variable.  Defaults to <code>None</code>.</p> </li> <li> <code>subsample</code>             (<code>float</code>, default:                 <code>1.0</code> )         \u2013          <p>Percent of records to randomly sample at each iteration when training a tree. Defaults to 1.0, meaning all data is used to training.</p> </li> <li> <code>top_rate</code>             (<code>float</code>, default:                 <code>0.1</code> )         \u2013          <p>Used only in goss. The retain ratio of large gradient data.</p> </li> <li> <code>other_rate</code>             (<code>float</code>, default:                 <code>0.2</code> )         \u2013          <p>Used only in goss. the retain ratio of small gradient data.</p> </li> <li> <code>colsample_bytree</code>             (<code>float</code>, default:                 <code>1.0</code> )         \u2013          <p>Specify the fraction of columns that should be sampled at each iteration, valid values are in the range <code>(0.0,1.0]</code>.</p> </li> <li> <code>seed</code>             (<code>integer</code>, default:                 <code>0</code> )         \u2013          <p>Integer value used to seed any randomness used in the algorithm. Defaults to 0.</p> </li> <li> <code>missing</code>             (<code>float</code>, default:                 <code>nan</code> )         \u2013          <p>Value to consider missing, when training and predicting with the booster. Defaults to <code>np.nan</code>.</p> </li> <li> <code>create_missing_branch</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>An experimental parameter, that if <code>True</code>, will create a separate branch for missing, creating a ternary tree, the missing node will be given the same weight value as the parent node. If this parameter is <code>False</code>, missing will be sent down either the left or right branch, creating a binary tree. Defaults to <code>False</code>.</p> </li> <li> <code>sample_method</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Optional string value to use to determine the method to use to sample the data while training. If this is None, no sample method will be used. If the <code>subsample</code> parameter is less than 1 and no sample_method is provided this <code>sample_method</code> will be automatically set to \"random\". Valid options are \"goss\" and \"random\". Defaults to <code>None</code>.</p> </li> <li> <code>grow_policy</code>             (<code>str</code>, default:                 <code>'DepthWise'</code> )         \u2013          <p>Optional string value that controls the way new nodes are added to the tree. Choices are <code>DepthWise</code> to split at nodes closest to the root, or <code>LossGuide</code> to split at nodes with the highest loss change.</p> </li> <li> <code>evaluation_metric</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Optional string value used to define an evaluation metric that will be calculated at each iteration if a <code>evaluation_dataset</code> is provided at fit time. The metric can be one of \"AUC\", \"LogLoss\", \"RootMeanSquaredLogError\", or \"RootMeanSquaredError\". If no <code>evaluation_metric</code> is passed, but an <code>evaluation_dataset</code> is passed, then \"LogLoss\", will be used with the \"LogLoss\" objective function, and \"RootMeanSquaredLogError\" will be used with \"SquaredLoss\".</p> </li> <li> <code>early_stopping_rounds</code>             (<code>int | None</code>, default:                 <code>None</code> )         \u2013          <p>If this is specified, and an <code>evaluation_dataset</code> is passed during fit, then an improvement in the <code>evaluation_metric</code> must be seen after at least this many iterations of training, otherwise training will be cut short.</p> </li> <li> <code>initialize_base_score</code>             (<code>bool</code>, default:                 <code>True</code> )         \u2013          <p>If this is specified, the <code>base_score</code> will be calculated at fit time using the <code>sample_weight</code> and y data in accordance with the requested <code>objective_type</code>. This will result in the passed <code>base_score</code> value being overridden.</p> </li> <li> <code>terminate_missing_features</code>             (<code>set[Any]</code>, default:                 <code>None</code> )         \u2013          <p>An optional iterable of features (either strings, or integer values specifying the feature indices if numpy arrays are used for fitting), for which the missing node will always be terminated, even if <code>allow_missing_splits</code> is set to true. This value is only valid if <code>create_missing_branch</code> is also True.</p> </li> <li> <code>missing_node_treatment</code>             (<code>str</code>, default:                 <code>'None'</code> )         \u2013          <p>Method for selecting the <code>weight</code> for the missing node, if <code>create_missing_branch</code> is set to <code>True</code>. Defaults to \"None\". Valid options are:</p> <ul> <li>\"None\": Calculate missing node weight values without any constraints.</li> <li>\"AssignToParent\": Assign the weight of the missing node to that of the parent.</li> <li>\"AverageLeafWeight\": After training each tree, starting from the bottom of the tree, assign the missing node weight to the weighted average of the left and right child nodes. Next assign the parent to the weighted average of the children nodes. This is performed recursively up through the entire tree. This is performed as a post processing step on each tree after it is built, and prior to updating the predictions for which to train the next tree.</li> <li>\"AverageNodeWeight\": Set the missing node to be equal to the weighted average weight of the left and the right nodes.</li> </ul> </li> <li> <code>log_iterations</code>             (<code>bool</code>, default:                 <code>0</code> )         \u2013          <p>Setting to a value (N) other than zero will result in information being logged about ever N iterations, info can be interacted with directly with the python <code>logging</code> module. For an example of how to utilize the logging information see the example here.</p> </li> <li> <code>feature_importance_method</code>             (<code>str</code>, default:                 <code>'Gain'</code> )         \u2013          <p>The feature importance method type that will be used to calculate the <code>feature_importances_</code> attribute on the booster.</p> </li> <li> <code>force_children_to_bound_parent</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Setting this parameter to <code>True</code> will restrict children nodes, so that they always contain the parent node inside of their range. Without setting this it's possible that both, the left and the right nodes could be greater, than or less than, the parent node. Defaults to <code>False</code>.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>TypeError</code>           \u2013          <p>Raised if an invalid dtype is passed.</p> </li> </ul> Example <p>Once, the booster has been initialized, it can be fit on a provided dataset, and performance field. After fitting, the model can be used to predict on a dataset. In the case of this example, the predictions are the log odds of a given record being 1.</p> <pre><code># Small example dataset\nfrom seaborn import load_dataset\n\ndf = load_dataset(\"titanic\")\nX = df.select_dtypes(\"number\").drop(columns=[\"survived\"])\ny = df[\"survived\"]\n\n# Initialize a booster with defaults.\nfrom forust import GradientBooster\nmodel = GradientBooster(objective_type=\"LogLoss\")\nmodel.fit(X, y)\n\n# Predict on data\nmodel.predict(X.head())\n# array([-1.94919663,  2.25863229,  0.32963671,  2.48732194, -3.00371813])\n\n# predict contributions\nmodel.predict_contributions(X.head())\n# array([[-0.63014213,  0.33880048, -0.16520798, -0.07798772, -0.85083578,\n#        -1.07720813],\n#       [ 1.05406709,  0.08825999,  0.21662544, -0.12083538,  0.35209258,\n#        -1.07720813],\n</code></pre>"},{"location":"#forust.GradientBooster.best_iteration","title":"best_iteration  <code>property</code>","text":"<pre><code>best_iteration: int | None\n</code></pre> <p>Get the best iteration if <code>early_stopping_rounds</code> was used when fitting.</p> <p>Returns:</p> <ul> <li> <code>int | None</code>         \u2013          <p>int | None: The best iteration, or None if <code>early_stopping_rounds</code> wasn't used.</p> </li> </ul>"},{"location":"#forust.GradientBooster.prediction_iteration","title":"prediction_iteration  <code>property</code>","text":"<pre><code>prediction_iteration: int | None\n</code></pre> <p>The prediction_iteration that will be used when predicting, up to this many trees will be used.</p> <p>Returns:</p> <ul> <li> <code>int | None</code>         \u2013          <p>int | None: Int if this is set, otherwise, None, in which case all trees will be used.</p> </li> </ul>"},{"location":"#forust.GradientBooster.number_of_trees","title":"number_of_trees  <code>property</code>","text":"<pre><code>number_of_trees: int\n</code></pre> <p>The number of trees in the model.</p> <p>Returns:</p> <ul> <li> <code>int</code> (            <code>int</code> )        \u2013          <p>The total number of trees in the model.</p> </li> </ul>"},{"location":"#forust.GradientBooster.fit","title":"fit","text":"<pre><code>fit(X: FrameLike, y: ArrayLike, sample_weight: Union[ArrayLike, None] = None, evaluation_data: None | list[tuple[FrameLike, ArrayLike, ArrayLike] | tuple[FrameLike, ArrayLike]] = None) -&gt; GradientBooster\n</code></pre> <p>Fit the gradient booster on a provided dataset.</p> <p>Parameters:</p> <ul> <li> <code>X</code>             (<code>FrameLike</code>)         \u2013          <p>Either a pandas DataFrame, or a 2 dimensional numpy array.</p> </li> <li> <code>y</code>             (<code>ArrayLike</code>)         \u2013          <p>Either a pandas Series, or a 1 dimensional numpy array. If \"LogLoss\" was the objective type specified, then this should only contain 1 or 0 values, where 1 is the positive class being predicted. If \"SquaredLoss\" is the objective type, then any continuous variable can be provided.</p> </li> <li> <code>sample_weight</code>             (<code>Union[ArrayLike, None]</code>, default:                 <code>None</code> )         \u2013          <p>Instance weights to use when training the model. If None is passed, a weight of 1 will be used for every record. Defaults to None.</p> </li> <li> <code>evaluation_data</code>             (<code>tuple[FrameLike, ArrayLike, ArrayLike] | tuple[FrameLike, ArrayLike]</code>, default:                 <code>None</code> )         \u2013          <p>An optional list of tuples, where each tuple should contain a dataset, and equal length target array, and optional an equal length sample weight array. If this is provided metric values will be calculated at each iteration of training. If <code>early_stopping_rounds</code> is supplied, the last entry of this list will be used to determine if performance has improved over the last set of iterations, for which if no improvement is not seen in <code>early_stopping_rounds</code> training will be cut short.</p> </li> </ul>"},{"location":"#forust.GradientBooster.predict","title":"predict","text":"<pre><code>predict(X: FrameLike, parallel: Union[bool, None] = None) -&gt; np.ndarray\n</code></pre> <p>Predict with the fitted booster on new data.</p> <p>Parameters:</p> <ul> <li> <code>X</code>             (<code>FrameLike</code>)         \u2013          <p>Either a pandas DataFrame, or a 2 dimensional numpy array.</p> </li> <li> <code>parallel</code>             (<code>Union[bool, None]</code>, default:                 <code>None</code> )         \u2013          <p>Optionally specify if the predict function should run in parallel on multiple threads. If <code>None</code> is passed, the <code>parallel</code> attribute of the booster will be used. Defaults to <code>None</code>.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>ndarray</code>         \u2013          <p>np.ndarray: Returns a numpy array of the predictions.</p> </li> </ul>"},{"location":"#forust.GradientBooster.predict_contributions","title":"predict_contributions","text":"<pre><code>predict_contributions(X: FrameLike, method: str = 'Average', parallel: Union[bool, None] = None) -&gt; np.ndarray\n</code></pre> <p>Predict with the fitted booster on new data, returning the feature contribution matrix. The last column is the bias term.</p> <p>When predicting with the data, the maximum iteration that will be used when predicting can be set using the <code>set_prediction_iteration</code> method. If <code>early_stopping_rounds</code> has been set, this will default to the best iteration, otherwise all of the trees will be used.</p> <p>If early stopping was used, the evaluation history can be retrieved with the get_evaluation_history method.</p> <p>Parameters:</p> <ul> <li> <code>X</code>             (<code>FrameLike</code>)         \u2013          <p>Either a pandas DataFrame, or a 2 dimensional numpy array.</p> </li> <li> <code>method</code>             (<code>str</code>, default:                 <code>'Average'</code> )         \u2013          <p>Method to calculate the contributions, available options are:</p> <ul> <li>\"Average\": If this option is specified, the average internal node values are calculated, this is equivalent to the <code>approx_contribs</code> parameter in XGBoost.</li> <li>\"Shapley\": Using this option will calculate contributions using the tree shap algorithm.</li> <li>\"Weight\": This method will use the internal leaf weights, to calculate the contributions. This is the same as what is described by Saabas here.</li> <li>\"BranchDifference\": This method will calculate contributions by subtracting the weight of the node the record will travel down by the weight of the other non-missing branch. This method does not have the property where the contributions summed is equal to the final prediction of the model.</li> <li>\"MidpointDifference\": This method will calculate contributions by subtracting the weight of the node the record will travel down by the mid-point between the right and left node weighted by the cover of each node. This method does not have the property where the contributions summed is equal to the final prediction of the model.</li> <li>\"ModeDifference\": This method will calculate contributions by subtracting the weight of the node the record will travel down by the weight of the node with the largest cover (the mode node). This method does not have the property where the contributions summed is equal to the final prediction of the model.</li> <li>\"ProbabilityChange\": This method is only valid when the objective type is set to \"LogLoss\". This method will calculate contributions as the change in a records probability of being 1 moving from a parent node to a child node. The sum of the returned contributions matrix, will be equal to the probability a record will be 1. For example, given a model, <code>model.predict_contributions(X, method=\"ProbabilityChange\") == 1 / (1 + np.exp(-model.predict(X)))</code></li> </ul> </li> <li> <code>parallel</code>             (<code>Union[bool, None]</code>, default:                 <code>None</code> )         \u2013          <p>Optionally specify if the predict function should run in parallel on multiple threads. If <code>None</code> is passed, the <code>parallel</code> attribute of the booster will be used. Defaults to <code>None</code>.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>ndarray</code>         \u2013          <p>np.ndarray: Returns a numpy array of the predicted contributions.</p> </li> </ul>"},{"location":"#forust.GradientBooster.predict_leaf_indices","title":"predict_leaf_indices","text":"<pre><code>predict_leaf_indices(X: FrameLike) -&gt; np.ndarray\n</code></pre> <p>Predict the leaf indices for each tree. This will be the node ID number, this can be used to identify the leaf node a record will fall into for each row, this could be paired directly with the <code>trees_to_dataframe</code> output. The data returned will be a matrix, where each column corresponds to a tree, thus the data will be of the shape (rows in X, prediction_iteration)</p> <p>Parameters:</p> <ul> <li> <code>X</code>             (<code>FrameLike</code>)         \u2013          <p>Either a pandas DataFrame, or a 2 dimensional numpy array.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>ndarray</code>         \u2013          <p>np.ndarray: Returns a numpy array of the predicted leaf indices..</p> </li> </ul>"},{"location":"#forust.GradientBooster.set_prediction_iteration","title":"set_prediction_iteration","text":"<pre><code>set_prediction_iteration(iteration: int)\n</code></pre> <p>Set the iteration that should be used when predicting. If <code>early_stopping_rounds</code> has been set, this will default to the best iteration, otherwise all of the trees will be used.</p> <p>Parameters:</p> <ul> <li> <code>iteration</code>             (<code>int</code>)         \u2013          <p>Iteration number to use, this will use all trees, up to this index. Setting this to 10, would result in trees 0 through 9 used for predictions.</p> </li> </ul>"},{"location":"#forust.GradientBooster.partial_dependence","title":"partial_dependence","text":"<pre><code>partial_dependence(X: FrameLike, feature: Union[str, int], samples: int | None = 100, exclude_missing: bool = True, percentile_bounds: tuple[float, float] = (0.2, 0.98)) -&gt; np.ndarray\n</code></pre> <p>Calculate the partial dependence values of a feature. For each unique value of the feature, this gives the estimate of the predicted value for that feature, with the effects of all features averaged out. This information gives an estimate of how a given feature impacts the model.</p> <p>Parameters:</p> <ul> <li> <code>X</code>             (<code>FrameLike</code>)         \u2013          <p>Either a pandas DataFrame, or a 2 dimensional numpy array. This should be the same data passed into the models fit, or predict, with the columns in the same order.</p> </li> <li> <code>feature</code>             (<code>Union[str, int]</code>)         \u2013          <p>The feature for which to calculate the partial dependence values. This can be the name of a column, if the provided X is a pandas DataFrame, or the index of the feature.</p> </li> <li> <code>samples</code>             (<code>int | None</code>, default:                 <code>100</code> )         \u2013          <p>Number of evenly spaced samples to select. If None is passed all unique values will be used. Defaults to 100.</p> </li> <li> <code>exclude_missing</code>             (<code>bool</code>, default:                 <code>True</code> )         \u2013          <p>Should missing excluded from the features? Defaults to True.</p> </li> <li> <code>percentile_bounds</code>             (<code>tuple[float, float]</code>, default:                 <code>(0.2, 0.98)</code> )         \u2013          <p>Upper and lower percentiles to start at when calculating the samples. Defaults to (0.2, 0.98) to cap the samples selected at the 5th and 95th percentiles respectively.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>An error will be raised if the provided X parameter is not a pandas DataFrame, and a string is provided for the feature.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>ndarray</code>         \u2013          <p>np.ndarray: A 2 dimensional numpy array, where the first column is the sorted unique values of the feature, and then the second column is the partial dependence values for each feature value.</p> </li> </ul> Example <p>This information can be plotted to visualize how a feature is used in the model, like so.</p> <p><pre><code>from seaborn import lineplot\nimport matplotlib.pyplot as plt\n\npd_values = model.partial_dependence(X=X, feature=\"age\", samples=None)\n\nfig = lineplot(x=pd_values[:,0], y=pd_values[:,1],)\nplt.title(\"Partial Dependence Plot\")\nplt.xlabel(\"Age\")\nplt.ylabel(\"Log Odds\")\n</code></pre> </p> <p>We can see how this is impacted if a model is created, where a specific constraint is applied to the feature using the <code>monotone_constraint</code> parameter.</p> <p><pre><code>model = GradientBooster(\n    objective_type=\"LogLoss\",\n    monotone_constraints={\"age\": -1},\n)\nmodel.fit(X, y)\n\npd_values = model.partial_dependence(X=X, feature=\"age\")\nfig = lineplot(\n    x=pd_values[:, 0],\n    y=pd_values[:, 1],\n)\nplt.title(\"Partial Dependence Plot with Monotonicity\")\nplt.xlabel(\"Age\")\nplt.ylabel(\"Log Odds\")\n</code></pre> </p>"},{"location":"#forust.GradientBooster.calculate_feature_importance","title":"calculate_feature_importance","text":"<pre><code>calculate_feature_importance(method: str = 'Gain', normalize: bool = True) -&gt; dict[int, float] | dict[str, float]\n</code></pre> <p>Feature importance values can be calculated with the <code>calculate_feature_importance</code> method. This function will return a dictionary of the features and their importance values. It should be noted that if a feature was never used for splitting it will not be returned in importance dictionary.</p> <p>Parameters:</p> <ul> <li> <code>method</code>             (<code>str</code>, default:                 <code>'Gain'</code> )         \u2013          <p>Variable importance method. Defaults to \"Gain\". Valid options are:</p> <ul> <li>\"Weight\": The number of times a feature is used to split the data across all trees.</li> <li>\"Gain\": The average split gain across all splits the feature is used in.</li> <li>\"Cover\": The average coverage across all splits the feature is used in.</li> <li>\"TotalGain\": The total gain across all splits the feature is used in.</li> <li>\"TotalCover\": The total coverage across all splits the feature is used in.</li> </ul> </li> <li> <code>normalize</code>             (<code>bool</code>, default:                 <code>True</code> )         \u2013          <p>Should the importance be normalized to sum to 1? Defaults to <code>True</code>.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[int, float] | dict[str, float]</code>         \u2013          <p>dict[str, float]: Variable importance values, for features present in the model.</p> </li> </ul> Example <pre><code>model.calculate_feature_importance(\"Gain\")\n# {\n#   'parch': 0.0713072270154953,\n#   'age': 0.11609109491109848,\n#   'sibsp': 0.1486879289150238,\n#   'fare': 0.14309120178222656,\n#   'pclass': 0.5208225250244141\n# }\n</code></pre>"},{"location":"#forust.GradientBooster.text_dump","title":"text_dump","text":"<pre><code>text_dump() -&gt; list[str]\n</code></pre> <p>Return all of the trees of the model in text form.</p> <p>Returns:</p> <ul> <li> <code>list[str]</code>         \u2013          <p>list[str]: A list of strings, where each string is a text representation of the tree.</p> </li> </ul> <p>Example:     <pre><code>model.text_dump()[0]\n# 0:[0 &lt; 3] yes=1,no=2,missing=2,gain=91.50833,cover=209.388307\n#       1:[4 &lt; 13.7917] yes=3,no=4,missing=4,gain=28.185467,cover=94.00148\n#             3:[1 &lt; 18] yes=7,no=8,missing=8,gain=1.4576768,cover=22.090348\n#                   7:[1 &lt; 17] yes=15,no=16,missing=16,gain=0.691266,cover=0.705011\n#                         15:leaf=-0.15120,cover=0.23500\n#                         16:leaf=0.154097,cover=0.470007\n</code></pre></p>"},{"location":"#forust.GradientBooster.json_dump","title":"json_dump","text":"<pre><code>json_dump() -&gt; str\n</code></pre> <p>Return the booster object as a string.</p> <p>Returns:</p> <ul> <li> <code>str</code> (            <code>str</code> )        \u2013          <p>The booster dumped as a json object in string form.</p> </li> </ul>"},{"location":"#forust.GradientBooster.load_booster","title":"load_booster  <code>classmethod</code>","text":"<pre><code>load_booster(path: str) -&gt; GradientBooster\n</code></pre> <p>Load a booster object that was saved with the <code>save_booster</code> method.</p> <p>Parameters:</p> <ul> <li> <code>path</code>             (<code>str</code>)         \u2013          <p>Path to the saved booster file.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>GradientBooster</code> (            <code>GradientBooster</code> )        \u2013          <p>An initialized booster object.</p> </li> </ul>"},{"location":"#forust.GradientBooster.save_booster","title":"save_booster","text":"<pre><code>save_booster(path: str)\n</code></pre> <p>Save a booster object, the underlying representation is a json file.</p> <p>Parameters:</p> <ul> <li> <code>path</code>             (<code>str</code>)         \u2013          <p>Path to save the booster object.</p> </li> </ul>"},{"location":"#forust.GradientBooster.insert_metadata","title":"insert_metadata","text":"<pre><code>insert_metadata(key: str, value: str)\n</code></pre> <p>Insert data into the models metadata, this will be saved on the booster object.</p> <p>Parameters:</p> <ul> <li> <code>key</code>             (<code>str</code>)         \u2013          <p>Key to give the inserted value in the metadata.</p> </li> <li> <code>value</code>             (<code>str</code>)         \u2013          <p>String value to assign to the key.</p> </li> </ul>"},{"location":"#forust.GradientBooster.get_metadata","title":"get_metadata","text":"<pre><code>get_metadata(key: str) -&gt; str\n</code></pre> <p>Get the value associated with a given key, on the boosters metadata.</p> <p>Parameters:</p> <ul> <li> <code>key</code>             (<code>str</code>)         \u2013          <p>Key of item in metadata.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code> (            <code>str</code> )        \u2013          <p>Value associated with the provided key in the boosters metadata.</p> </li> </ul>"},{"location":"#forust.GradientBooster.get_evaluation_history","title":"get_evaluation_history","text":"<pre><code>get_evaluation_history() -&gt; np.ndarray | None\n</code></pre> <p>Get the results of the <code>evaluation_metric</code> calculated on the <code>evaluation_dataset</code> passed to <code>fit</code>, at each iteration. If no <code>evaluation_dataset</code> was passed, this will return None.</p> <p>Returns:</p> <ul> <li> <code>ndarray | None</code>         \u2013          <p>np.ndarray | None: A numpy array equal to the shape of the number</p> </li> <li> <code>ndarray | None</code>         \u2013          <p>of evaluation datasets passed, and the number of trees in the model.</p> </li> </ul> Example <pre><code>model = GradientBooster(objective_type=\"LogLoss\")\nmodel.fit(X, y, evaluation_data=[(X, y)])\n\nmodel.get_evaluation_history()[0:3]\n\n# array([[588.9158873 ],\n#        [532.01055803],\n#        [496.76933646]])\n</code></pre>"},{"location":"#forust.GradientBooster.get_best_iteration","title":"get_best_iteration","text":"<pre><code>get_best_iteration() -&gt; int | None\n</code></pre> <p>Get the best iteration if <code>early_stopping_rounds</code> was used when fitting.</p> <p>Returns:</p> <ul> <li> <code>int | None</code>         \u2013          <p>int | None: The best iteration, or None if <code>early_stopping_rounds</code> wasn't used.</p> </li> </ul>"},{"location":"#forust.GradientBooster.get_params","title":"get_params","text":"<pre><code>get_params(deep=True) -&gt; dict[str, Any]\n</code></pre> <p>Get all of the parameters for the booster.</p> <p>Parameters:</p> <ul> <li> <code>deep</code>             (<code>bool</code>, default:                 <code>True</code> )         \u2013          <p>This argument does nothing, and is simply here for scikit-learn compatibility.. Defaults to True.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>         \u2013          <p>dict[str, Any]: The parameters of the booster.</p> </li> </ul>"},{"location":"#forust.GradientBooster.set_params","title":"set_params","text":"<pre><code>set_params(**params: Any) -&gt; GradientBooster\n</code></pre> <p>Set the parameters of the booster, this has the same effect as reinstating the booster.</p> <p>Returns:</p> <ul> <li> <code>GradientBooster</code> (            <code>GradientBooster</code> )        \u2013          <p>Booster with new parameters.</p> </li> </ul>"},{"location":"#forust.GradientBooster.get_node_lists","title":"get_node_lists","text":"<pre><code>get_node_lists(map_features_names: bool = True) -&gt; list[list[Node]]\n</code></pre> <p>Return the tree structures representation as a list of python objects.</p> <p>Parameters:</p> <ul> <li> <code>map_features_names</code>             (<code>bool</code>, default:                 <code>True</code> )         \u2013          <p>Should the feature names tried to be mapped to a string, if a pandas dataframe was used. Defaults to True.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[list[Node]]</code>         \u2013          <p>list[list[Node]]: A list of lists where each sub list is a tree, with all of it's respective nodes.</p> </li> </ul> Example <p>This can be run directly to get the tree structure as python objects.</p> <pre><code>fmod = GradientBooster(max_depth=2)\nfmod.fit(X, y=y)\n\nfmod.get_node_lists()[0]\n\n# [Node(num=0, weight_value...,\n# Node(num=1, weight_value...,\n# Node(num=2, weight_value...,\n# Node(num=3, weight_value...,\n# Node(num=4, weight_value...,\n# Node(num=5, weight_value...,\n# Node(num=6, weight_value...,]\n</code></pre>"},{"location":"#forust.GradientBooster.trees_to_dataframe","title":"trees_to_dataframe","text":"<pre><code>trees_to_dataframe() -&gt; pd.DataFrame\n</code></pre> <p>Return the tree structure as a pandas DataFrame object.</p> <p>Returns:</p> <ul> <li> <code>DataFrame</code>         \u2013          <p>pd.DataFrame: Trees in a pandas dataframe.</p> </li> </ul> Example <p>This can be used directly to print out the tree structure as a pandas dataframe. The Leaf values will have the \"Gain\" column replaced with the weight value.</p> <pre><code>model.trees_to_dataframe().head()\n</code></pre> Tree Node ID Feature Split Yes No Missing Gain Cover 0 0 0 0-0 pclass 3 0-1 0-2 0-2 91.5083 209.388 1 0 1 0-1 fare 13.7917 0-3 0-4 0-4 28.1855 94.0015"},{"location":"#logging-output","title":"Logging output","text":"<p>Info is logged while the model is being trained if the <code>log_iterations</code> parameter is set to a value greater than <code>0</code> while fitting the booster. The logs can be printed to stdout while training like so.</p> <pre><code>import logging\nlogging.basicConfig()\nlogging.getLogger().setLevel(logging.INFO)\n\nfmod = GradientBooster(log_iterations=1)\nfmod.fit(X, y, evaluation_data=[(X, y)])\n\n# INFO:forust_ml.gradientbooster:Iteration 0 evaluation data values: 0.2828\n# INFO:forust_ml.gradientbooster:Completed iteration 0 of 10\n# INFO:forust_ml.gradientbooster:Iteration 1 evaluation data values: 0.2807\n# INFO:forust_ml.gradientbooster:Completed iteration 1 of 10\n# INFO:forust_ml.gradientbooster:Iteration 2 evaluation data values: 0.2787\n# INFO:forust_ml.gradientbooster:Completed iteration 2 of 10\n</code></pre> <p>The log output can also be captured in a file also using the <code>logging.basicConfig()</code> <code>filename</code> option.</p> <pre><code>import logging\nlogging.basicConfig(filename=\"training-info.log\")\nlogging.getLogger().setLevel(logging.INFO)\n\nfmod = GradientBooster(log_iterations=10)\nfmod.fit(X, y, evaluation_data=[(X, y)])\n</code></pre>"}]}